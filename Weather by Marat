package main

import (
    "encoding/json"
    "fmt"
    "io/ioutil"
    "log"
    "net/http"
    "net/url"   
    tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func getCoordinatesNominatim(city string) (string, string, string, error) {
    encodedCity := url.QueryEscape(city)
    urlStr := fmt.Sprintf("https://nominatim.openstreetmap.org/search?format=json&q=%s", encodedCity)
    req, _ := http.NewRequest("GET", urlStr, nil)
    req.Header.Set("User-Agent", "weather-telegram-bot")
    resp, err := http.DefaultClient.Do(req)
    if err != nil {
        return "", "", "", err
    }
    defer resp.Body.Close()
    body, _ := ioutil.ReadAll(resp.Body)
    var data []map[string]interface{}
    if err := json.Unmarshal(body, &data); err != nil {
        return "", "", "", err
    }
    if len(data) == 0 {
        return "", "", "", fmt.Errorf("Город не найден")
    }
    lat := data[0]["lat"].(string)
    lon := data[0]["lon"].(string)
    displayName := data[0]["display_name"].(string)
    return lat, lon, displayName, nil
}

func getWeatherOpenMeteo(lat, lon string) (string, error) {
    url := fmt.Sprintf("https://api.open-meteo.com/v1/forecast?latitude=%s&longitude=%s&current_weather=true", lat, lon)
    resp, err := http.Get(url)
    if err != nil {
        return "", err
    }
    defer resp.Body.Close()
    body, _ := ioutil.ReadAll(resp.Body)
    var data map[string]interface{}
    if err := json.Unmarshal(body, &data); err != nil {
        return "", err
    }
    current, ok := data["current_weather"].(map[string]interface{})
    if !ok {
        return "", fmt.Errorf("Ошибка разбора данных о погоде")
    }
    temp, ok := current["temperature"].(float64)
    if !ok {
        return "", fmt.Errorf("Ошибка разбора температуры")
    }
    wind, _ := current["windspeed"].(float64)
    weatherCode := int(current["weathercode"].(float64))
    description := weatherCodeToDescription(weatherCode)
    return fmt.Sprintf("Сейчас %.0f°C, %s, ветер %.0f м/с.", temp, description, wind), nil
}

func weatherCodeToDescription(code int) string {
    switch code {
    case 0:
        return "ясно"
    case 1, 2, 3:
        return "переменная облачность"
    case 45, 48:
        return "туман"
    case 51, 53, 55, 56, 57:
        return "морось"
    case 61, 63, 65, 66, 67:
        return "дождь"
    case 71, 73, 75, 77:
        return "снег"
    case 80, 81, 82:
        return "ливень"
    case 85, 86:
        return "снегопад"
    case 95:
        return "гроза"
    case 96, 99:
        return "гроза с градом"
    default:
        return "неизвестная погода"
    }
}

func main() {
    botToken := "7516491558:AAHOvKu-hZJVDvDKHN0vSpMb9V05ClzZ4W4"

    bot, err := tgbotapi.NewBotAPI(botToken)
    if err != nil {
        log.Panic(err)
    }

    bot.Debug = true
    log.Printf("Authorized on account %s", bot.Self.UserName)

    u := tgbotapi.NewUpdate(0)
    u.Timeout = 60

    updates := bot.GetUpdatesChan(u)

    for update := range updates {
        if update.Message != nil {
            city := update.Message.Text

        if city == "/start" {
            msg := tgbotapi.NewMessage(update.Message.Chat.ID, "Введите город, чтобы узнать погоду.")
            bot.Send(msg)
            continue
        }

            lat, lon, displayName, err := getCoordinatesNominatim(city)
            if err != nil {
                msg := tgbotapi.NewMessage(update.Message.Chat.ID, "Не могу найти такой город :(")
                bot.Send(msg)
                continue
            }

            weather, err := getWeatherOpenMeteo(lat, lon)
            if err != nil {
                msg := tgbotapi.NewMessage(update.Message.Chat.ID, "Ошибка при получении погоды :(")
                bot.Send(msg)
                continue
            }

            msg := tgbotapi.NewMessage(update.Message.Chat.ID,
                fmt.Sprintf("Погода для: %s\n%s", displayName, weather))
            bot.Send(msg)
        }
    }
}
